{"version":3,"sources":["snake.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Snake","food_x","food_y","framerate","speed","snake","x","y","score","changing_direction","dx","dy","snakeboard","document","getElementById","snakeboard_ctx","getContext","clear_board","fillStyle","strokestyle","fillRect","width","height","strokeRect","drawSnake","forEach","drawSnakePart","drawFood","snakePart","lineWidth","has_game_ended","i","length","hitLeftWall","hitRightWall","hitToptWall","hitBottomWall","random_food","min","max","Math","round","random","gen_food","part","move_snake","head","unshift","innerHTML","pop","main","sad_text","setTimeout","addEventListener","event","keyPressed","keyCode","goingUp","goingDown","goingRight","goingLeft","window","location","href","id","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3aad5d77.chunk.js","sourcesContent":["import React from 'react';\nimport './snake.scss';\n\nclass Snake extends React.Component {\n    \n    componentDidMount() {\n        const board_border = 'black';\n        const board_background = \"rgba(0, 0, 0, 0.5)\";\n        const snake_col = 'rgba(200, 200, 0, 0.8)';\n        const snake_border = 'rgba(255,255,255,0)';\n\n        // Framerate is the same as box size\n        const framerate = 20;\n\n        // How much score goes up per food\n        let score_growth = 10;\n\n        // Setting the speed. The lower, the faster (Make this LET when it's changeable)\n        const initial_speed = 100;\n        let speed = 0+initial_speed;\n        let speed_increase = 5;\n\n        const initial_snake = [\n          {x: 200, y: 200},\n          {x: 190, y: 200},\n          {x: 180, y: 200},\n          {x: 170, y: 200},\n          {x: 160, y: 200}\n        ]\n\n        let snake = initial_snake;\n    \n        // Initial score\n        let score = 0;\n        \n        // True if changing direction\n        let changing_direction = false;\n        // Horizontal velocity\n        let food_x;\n        let food_y;\n        let dx = framerate;\n        // Vertical velocity\n        let dy = 0;\n        \n        \n        // Get the canvas element\n        let snakeboard = document.getElementById(\"snakeboard\");\n        // Return a two dimensional drawing context\n        let snakeboard_ctx = snakeboard.getContext(\"2d\");\n\n        const initialize_game = () => {\n            window.location.href = '/';\n        }\n        \n        // main function called repeatedly to keep the game running\n        const main = () => {\n            \n            if (has_game_ended()) {\n                let sad_text = 'You died you loser! ';\n                sad_text += 'Final score: <span id=\"score\">'+score+'</span>';\n                document.getElementById('ScoreContainer').innerHTML = sad_text;   \n                return;\n            }\n                \n            changing_direction = false;\n            setTimeout(function onTick() {\n            clear_board();\n            drawFood();\n            move_snake();\n            drawSnake();\n            // Repeat\n            main();\n          }, speed)\n        }\n        \n        // draw a border around the canvas\n        const clear_board = () => {\n          //  Select the colour to fill the drawing\n          snakeboard_ctx.fillStyle = board_background;\n          //  Select the colour for the border of the canvas\n          snakeboard_ctx.strokestyle = board_border;\n          // Draw a \"filled\" rectangle to cover the entire canvas\n          snakeboard_ctx.fillRect(0, 0, snakeboard.width, snakeboard.height);\n          // Draw a \"border\" around the entire canvas\n          snakeboard_ctx.strokeRect(0, 0, snakeboard.width, snakeboard.height);\n        }\n        \n        // Draw the snake on the canvas\n        const drawSnake = () => {\n          // Draw each part\n          snake.forEach(drawSnakePart)\n        }\n    \n        const drawFood = () => {\n          snakeboard_ctx.fillStyle = 'tomato';\n          snakeboard_ctx.strokestyle = 'tomato';\n          snakeboard_ctx.fillRect(food_x, food_y, framerate, framerate);\n          snakeboard_ctx.strokeRect(food_x, food_y, framerate, framerate);\n        }\n        \n        // Draw one snake part\n        const drawSnakePart = (snakePart) => {\n    \n          // Set the colour of the snake part\n          snakeboard_ctx.fillStyle = snake_col;\n          // Set the border colour of the snake part\n          snakeboard_ctx.strokestyle = snake_border;\n          snakeboard_ctx.lineWidth = 0;\n          // Draw a \"filled\" rectangle to represent the snake part at the coordinates\n          // the part is located\n          snakeboard_ctx.fillRect(snakePart.x, snakePart.y, framerate, framerate);\n          // Draw a border around the snake part\n          snakeboard_ctx.strokeRect(snakePart.x, snakePart.y, framerate, framerate);\n        }\n    \n        const has_game_ended = () => {\n          for (let i = 4; i < snake.length; i++) {\n            if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) return true\n          }\n          const hitLeftWall = snake[0].x < 0;\n          const hitRightWall = snake[0].x > snakeboard.width - framerate;\n          const hitToptWall = snake[0].y < 0;\n          const hitBottomWall = snake[0].y > snakeboard.height - framerate;\n          return hitLeftWall || hitRightWall || hitToptWall || hitBottomWall\n        }\n    \n        const random_food = (min, max) => {\n          return Math.round((Math.random() * (max-min) + min) / framerate) * framerate;\n        }\n    \n        const gen_food = () => {\n          // Generate a random number the food x-coordinate\n          food_x = random_food(0, snakeboard.width - framerate);\n          // Generate a random number for the food y-coordinate\n          food_y = random_food(0, snakeboard.height - framerate);\n          // if the new food location is where the snake currently is, generate a new food location\n          snake.forEach(function has_snake_eaten_food(part) {\n            const has_eaten = part.x === food_x && part.y === food_y;\n            if (has_eaten) gen_food();\n          });\n        }\n    \n        const change_direction = (event) => {\n          const LEFT_KEY = 37;\n          const RIGHT_KEY = 39;\n          const UP_KEY = 38;\n          const DOWN_KEY = 40;\n          const ENTER_KEY = 13;\n          \n        // Prevent the snake from reversing\n        \n          if (changing_direction) return;\n          changing_direction = true;\n          const keyPressed = event.keyCode;\n          const goingUp = dy === -framerate;\n          const goingDown = dy === framerate;\n          const goingRight = dx === framerate;\n          const goingLeft = dx === -framerate;\n          if (keyPressed === ENTER_KEY) {\n              initialize_game();\n          }\n          if (keyPressed === LEFT_KEY && !goingRight) {\n            dx = -framerate;\n            dy = 0;\n          }\n          if (keyPressed === UP_KEY && !goingDown) {\n            dx = 0;\n            dy = -framerate;\n          }\n          if (keyPressed === RIGHT_KEY && !goingLeft) {\n            dx = framerate;\n            dy = 0;\n          }\n          if (keyPressed === DOWN_KEY && !goingUp) {\n            dx = 0;\n            dy = framerate;\n          }\n        }\n    \n        const move_snake = () => {\n          // Create the new Snake's head\n          const head = {x: snake[0].x + dx, y: snake[0].y + dy};\n          // Add the new head to the beginning of snake body\n          snake.unshift(head);\n          const has_eaten_food = snake[0].x === food_x && snake[0].y === food_y;\n          if (has_eaten_food) {\n            // Increase speed\n            speed -= speed_increase;\n            // Increase score\n            score += score_growth;\n            // Display score on screen\n            document.getElementById('score').innerHTML = score;\n            // Display speed\n            document.getElementById('speed').innerHTML = initial_speed - speed;\n            // Generate new food location\n            gen_food();\n          } else {\n            // Remove the last part of snake body\n            snake.pop();\n          }\n        }\n\n\n        // Start game\n        main();\n\n        gen_food();\n    \n        document.addEventListener(\"keydown\", change_direction);\n\n    }\n\n    render() {\n\n        return (\n            <div id=\"SnakeGame\">\n                <div id=\"ScoreContainer\">Score: <span id=\"score\">0</span></div>\n                <div id=\"SpeedContainer\">Speed: <span id=\"speed\">0</span></div>\n                <canvas id=\"snakeboard\" width=\"800\" height=\"800\"></canvas>\n            </div> \n        )\n\n    }\n\n}\n\n\nexport default Snake;","import './App.css';\nimport Snake from './snake.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Snake />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}